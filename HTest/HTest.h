#pragma once

/*==============================================================================
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include <random>

//******************************************************************************
//******************************************************************************
//******************************************************************************
// This class implements a general purpose shared storage object. It contains
// status counters and flags.

class HTest
{
public:

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Constants.

   static const int cMaxStringSize = 100;

   const char* cDigitMap = "0123456789";
   const char* cLowerMap = "abcdefghijklmnopqrstuvwxyz";

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Members:

   // Output.
   char mOutString[cMaxStringSize];
   int mOutSize;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Members:

   // Random number generator for random timer delay.
   std::random_device mRandomDevice;
   std::mt19937       mRandomGen;
   std::uniform_int_distribution<> mRandomDigitIndex;
   std::uniform_int_distribution<> mRandomAlphaIndex;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods:

   // Constructor.
   HTest();
   void reset();
   void show();

   // Tests.
   bool doTest();

   void doRun1();
   void doRun2();
   void doGenOut1();
   void doGenOut2();

};

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Global instance

#ifdef _HTEST_CPP_
          HTest gHTest;
#else
   extern HTest gHTest;
#endif

//******************************************************************************
//******************************************************************************
//******************************************************************************

