/*==============================================================================
Description:
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************
#include "stdafx.h"

#include <conio.h>
#include <ctype.h>

#define  _HTEST_CPP_
#include "HTest.h"

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Constructor

HTest::HTest()
   :
   mRandomGen(mRandomDevice()),
   mRandomDigitIndex(0, 9),
   mRandomAlphaIndex(0, 25)
{
   reset();
}

void HTest::reset()
{
   mOutString[0] = 0;
   mOutSize = 8;
}

void HTest::show()
{
   puts(mOutString);
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Generate output.

void HTest::doGenOut1()
{
   for (int i = 0; i < mOutSize; i++)
   {
      int k = mRandomDigitIndex(mRandomGen);
      mOutString[i] = cDigitMap[k];
      //Prn::print(0, "some %d %d $ %d", i, k, mOutString[i]);
   }
   mOutString[mOutSize] = 0;
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Generate output.

void HTest::doGenOut2()
{
   for (int i = 0; i < mOutSize; i++)
   {
      int k = mRandomAlphaIndex(mRandomGen);
      mOutString[i] = cLowerMap[k];
      //Prn::print(0, "some %d %d $ %d", i, k, mOutString[i]);
   }
   mOutString[mOutSize] = 0;
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Run test.

bool HTest::doTest()
{
   puts(mOutString);
   int tIndex = 0;
   while (true)
   {
      int tChar = _getch();
      if (tChar == 27) return false;
      if (tChar == mOutString[tIndex])
      {
         putchar(tChar);
         if (++tIndex == mOutSize) break;
      }
   }
   return true;
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Run test.

void HTest::doRun1()
{
   while (true)
   {
      doGenOut1();
      if (!doTest())
      {
         printf("done\n");
         return;
      }
      printf("\n");
   }
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Run test.

void HTest::doRun2()
{
   while (true)
   {
      doGenOut2();
      if (!doTest())
      {
         printf("done\n");
         return;
      }
      printf("\n");
   }
}
